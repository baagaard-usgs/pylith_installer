ARG BUILD_ENV=nocerts
FROM ubuntu:22.04 as os-update
LABEL maintainer="Brad Aagaard <baagaard@usgs.gov>"

ARG TARGETARCH

ENV BUILD_ENV=${BUILD_ENV} TARGET_PLATFORM=${TARGETPLATFORM}
RUN echo "Building for ${TARGETARCH}"

RUN apt-get update \
     && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
     g++ \
     make \
     file \
     locales \
     automake \
     autoconf \
     libtool \
     curl \
     libpython3.10 \
     python3-dev \
     python3.10-venv \
     python3-pip \
     python3-setuptools \
     zlib1g-dev \
     unzip \
     git \
     ca-certificates \
     libcppunit-dev \
     libmpich-dev \
     mpich \
     libhdf5-mpich-103 \
     libhdf5-mpich-dev \
     hdf5-tools \
     sqlite3 \
     libsqlite3-0 \
     libsqlite3-dev \
     proj-bin \
     proj-data \
     libproj-dev \
     cmake \
     swig \
     libgsl27 \
     libgsl-dev \
     lcov \
     gdb \
     valgrind \
     tree \
     less \
     uncrustify \
     gnupg2 \
     ssh \
     linux-tools-common \
     vim-common \
     vim-runtime \
     vim-nox \
     xterm

RUN locale-gen en_US.UTF-8
RUN echo "kernel.yama.ptrace_scope = 0" > /etc/sysctl.d/10-ptrace.conf && service procps restart

# Set DMAV_FORK_SAFE=1 to allow use of --petsc.start_in_debugger with PyLith
ENV RDMAV_FORK_SAFE=1

# ------------------------------------------------------------------------------
from os-update as build-certs-doi

ONBUILD COPY docker/certs/ /usr/local/share/ca-certificates
ONBUILD RUN update-ca-certificates
ONBUILD ENV CERT_PATH=/etc/ssl/certs CERT_FILE=DOIRootCA2.pem

from os-update as build-nocerts
ONBUILD ENV CERT_PATH=no  CERT_FILE=no

# ------------------------------------------------------------------------------
from build-${BUILD_ENV} as arch-amd64
ONBUILD ENV ARCH_LIBPATH="x86_64-linux-gnu"
ONBUILD ENV PYQT_OPTION="--enable-pyqt"
ONBUILD ENV GMSH_OPTION="--enable-gmsh"

from build-${BUILD_ENV} as arch-arm64
ONBUILD ENV ARCH_LIBPATH="aarch64-linux-gnu"
ONBUILD ENV GMSH_OPTION="--disable-gmsh"
ONBUILD ENV PYQT_OPTION="--disable-pyqt"
# gmsh not available on linux/arm64

# ------------------------------------------------------------------------------
from arch-${TARGETARCH} as setup-env

ENV  PYLITH_USER=pylith-dev \
     PYLITHDEPS_DIR=/opt/dependencies \
     DEV_DIR=/opt/pylith \
     PYTHON_VERSION=3.10 \
     HDF5_INCDIR=/usr/include/hdf5/mpich \
     HDF5_LIBDIR=/usr/lib/${ARCH_LIBPATH}/hdf5/mpich \
     PATH_ORIG=${PATH}

ENV  HOME=/home/$PYLITH_USER \
     INSTALL_DIR=$DEV_DIR/dest-debug \
     TOP_SRCDIR=$DEV_DIR/src \
     TOP_BUILDDIR=$DEV_DIR/build

# Create 'pylith-user'
RUN useradd --create-home --shell /bin/bash $PYLITH_USER \
     && mkdir -p ${PYLITHDEPS_DIR} \
     && mkdir -p ${DEV_DIR} \
     && chown ${PYLITH_USER} ${DEV_DIR} \
     && chgrp ${PYLITH_USER} ${DEV_DIR}
ENV PATH=${PYLITHDEPS_DIR}/bin:$PATH \
     LD_LIBRARY_PATH=${PYLITHDEPS_DIR}/lib \
     PYTHONPATH=${PYLITHDEPS_DIR}/lib/python${PYTHON_VERSION}/site-packages

# ------------------------------------------------------------------------------
from setup-env as build-deps
# PyLith installer
ENV  src_dir=/opt/pylith-installer/src  build_dir=/opt/pylith-installer/build
RUN mkdir -p /opt/pylith-installer && mkdir -p ${build_dir}

COPY --chown=pylith-dev:pylith-dev . ${src_dir}


WORKDIR ${src_dir}
RUN autoreconf --install --verbose --force

WORKDIR ${build_dir}
RUN ${src_dir}/configure --prefix=${PYLITHDEPS_DIR} --with-fetch=curl \
     --with-fortran=no --with-make-threads=`nproc` \
     --with-hdf5-incdir=${HDF5_INCDIR} --with-hdf5-libdir=${HDF5_LIBDIR} \
     --with-cert-path=${CERT_PATH} --with-cert-file=${CERT_FILE} \
     --disable-mpi \
     --disable-cppunit \
     --disable-cmake \
     --disable-sqlite \
     --disable-hdf5 \
     --disable-proj \
     --enable-catch2 \
     --enable-h5py \
     --enable-netcdf \
     --enable-netcdfpy \
     --enable-developer \
     --enable-matplotlib \
     ${GMSH_option} \
     && make -C dependencies \
     && rm -r /opt/pylith-installer

# ------------------------------------------------------------------------------
from build-deps as setup-workspace

WORKDIR ${HOME}
USER ${PYLITH_USER}

# Environment variables used in VSCode settings
ENV  PETSC_DIR=${TOP_SRCDIR}/petsc \
     PETSC_ARCH=arch-pylith-debug \
     PYLITH_DIR=${INSTALL_DIR} \
     PYLITH_BUILDDIR=${TOP_BUILDDIR}/pylith-debug  \
     PYTHON_INCDIR=/usr/include/python3.10 \
     MPI_INCDIR=/usr/include/${ARCH_LIBPATH}/mpich \
     PROJ_INCDIR=/usr/include \
     CPPUNIT_INCDIR=/usr/include \
     CATCH2_INCDIR=/usr/include

ENV PATH=${PYLITH_DIR}/bin:${PYLITHDEPS_DIR}/bin:${PATH_ORIG} \
     LD_LIBRARY_PATH=${PYLITH_DIR}/lib:${PYLITHDEPS_DIR}/lib \
     PYTHONPATH=${PYLITH_DIR}/lib/python${PYTHON_VERSION}/site-packages:${PYLITHDEPS_DIR}/lib/python${PYTHON_VERSION}/site-packages

CMD /bin/bash

# docker run -ti --rm -u root registry.gitlab.com/cig-pylith/pylith_installer/pylith-devenv /bin/bash
# service procps restart
# cat /proc/sys/kernel/yama/ptrace_scope
